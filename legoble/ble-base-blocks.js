!function(e){const o=e.ArgumentType,r=e.BlockType,a=e.Cast,l={BLACK:0,PINK:1,PURPLE:2,BLUE:3,LIGHT_BLUE:4,LIGHT_GREEN:5,GREEN:6,YELLOW:7,ORANGE:8,RED:9,WHITE:10,NONE:-1},u=()=>new Promise(e=>window.setTimeout(e,100));e.export(class{constructor(e){this._peripheral=e}get externalPorts(){return["A","B","C","D"]}get multipleExternalPorts(){return["A","B","C","D","A+B","C+D","A+B+C+D"]}get hasInternalTiltSensorBlocks(){return!0}get hasAdvancedBlocks(){return!1}getBlocks(e){var t=[{opcode:"motorPWM",text:e({id:"legobluetooth.motorPWM",default:"[PORT] start motor at [POWER] % power"}),blockType:r.COMMAND,arguments:{PORT:{type:o.STRING,menu:"MULTIPLE_PORT",defaultValue:"A"},POWER:{type:o.NUMBER,defaultValue:100}}},{opcode:"motorStop",text:e({id:"legobluetooth.motorStop",default:"[PORT] stop motor"}),blockType:r.COMMAND,arguments:{PORT:{type:o.STRING,menu:"MULTIPLE_PORT",defaultValue:"A"}}},"---",{opcode:"motorRunFor",text:e({id:"legobluetooth.motorRunFor",default:"[PORT] run [DIRECTION] for [VALUE] [UNIT]"}),blockType:r.COMMAND,arguments:{PORT:{type:o.STRING,menu:"MULTIPLE_PORT",defaultValue:"A"},DIRECTION:{type:o.NUMBER,menu:"DIRECTION",defaultValue:1},VALUE:{type:o.NUMBER,defaultValue:1},UNIT:{type:o.STRING,menu:"MOTOR_UNIT",defaultValue:"rotations"}}},{opcode:"motorStart",text:e({id:"legobluetooth.motorStart",default:"[PORT] start motor [DIRECTION]"}),blockType:r.COMMAND,arguments:{PORT:{type:o.STRING,menu:"MULTIPLE_PORT",defaultValue:"A"},DIRECTION:{type:o.NUMBER,menu:"DIRECTION",defaultValue:1}}},{opcode:"motorSetSpeed",text:e({id:"legobluetooth.motorSetSpeed",default:"[PORT] set speed to [SPEED] %"}),blockType:r.COMMAND,arguments:{PORT:{type:o.STRING,menu:"MULTIPLE_PORT",defaultValue:"A"},SPEED:{type:o.NUMBER,defaultValue:75}}},{opcode:"getRelativePosition",text:e({id:"legobluetooth.getRelativePosition",default:"[PORT] relative position"}),blockType:r.REPORTER,arguments:{PORT:{type:o.STRING,menu:"PORT",defaultValue:"A"}}},{opcode:"motorResetRelativePosition",text:e({id:"legobluetooth.motorResetRelativePosition",default:"[PORT] reset relative position to [RELATIVE_POSITION]"}),blockType:r.COMMAND,arguments:{PORT:{type:o.STRING,menu:"MULTIPLE_PORT",defaultValue:"A"},RELATIVE_POSITION:{type:o.NUMBER,defaultValue:0}}},"---",{opcode:"getColor",text:e({id:"legobluetooth.getColor",default:"[PORT] color"}),blockType:r.REPORTER,arguments:{PORT:{type:o.STRING,menu:"PORT",defaultValue:"A"}}},{opcode:"getDistance",text:e({id:"legobluetooth.getDistance",default:"[PORT] distance"}),blockType:r.REPORTER,arguments:{PORT:{type:o.STRING,menu:"PORT",defaultValue:"A"}}},{opcode:"getForce",text:e({id:"legobluetooth.getForce",default:"[PORT] force"}),blockType:r.REPORTER,arguments:{PORT:{type:o.STRING,menu:"PORT",defaultValue:"A"}}},{opcode:"getTilt",text:e({id:"legobluetooth.getTilt",default:"[PORT] tilt [XY]"}),blockType:r.REPORTER,arguments:{PORT:{type:o.STRING,menu:"PORT",defaultValue:"A"},XY:{type:o.STRING,menu:"XY",defaultValue:"x"}}},"---",{opcode:"setHubLEDColor",text:e({id:"legobluetooth.setHubLEDColor",default:"set hub LED color to [COLOR]"}),blockType:r.COMMAND,arguments:{COLOR:{type:o.NUMBER,menu:"LED_COLOR",defaultValue:l.BLUE}}}];return this.hasInternalTiltSensorBlocks&&t.push({opcode:"getHubTilt",text:e({id:"legobluetooth.getHubTilt",default:"hub tilt [XYZ]"}),blockType:r.REPORTER,arguments:{XYZ:{type:o.STRING,menu:"XYZ",defaultValue:"x"}}}),this.hasAdvancedBlocks&&(t.push({opcode:"getName",text:e({id:"legobluetooth.getName",default:"name"}),blockType:r.REPORTER}),t.push({opcode:"getFirmwareVersion",text:e({id:"legobluetooth.getFirmwareVersion",default:"firmware version"}),blockType:r.REPORTER}),t.push({opcode:"getBatteryLevel",text:e({id:"legobluetooth.getBatteryLevel",default:"battery level"}),blockType:r.REPORTER})),t}getMenus(e){return{PORT:{acceptReporters:!0,items:this.externalPorts},MULTIPLE_PORT:{acceptReporters:!0,items:this.multipleExternalPorts},MOTOR_UNIT:{acceptReporters:!1,items:[{text:e({id:"legobluetooth.rotations",default:"rotations"}),value:"rotations"},{text:e({id:"legobluetooth.degrees",default:"degrees"}),value:"degrees"},{text:e({id:"legobluetooth.seconds",default:"seconds"}),value:"seconds"}]},DIRECTION:{acceptReporters:!1,items:[{text:"⬆︎",value:"1"},{text:"⬇",value:"-1"}]},LED_COLOR:{acceptReporters:!0,items:[{text:e({id:"legobluetooth.black",default:"Black"}),value:String(l.BLACK)},{text:e({id:"legobluetooth.pink",default:"Pink"}),value:String(l.PINK)},{text:e({id:"legobluetooth.purple",default:"Purple"}),value:String(l.PURPLE)},{text:e({id:"legobluetooth.blue",default:"Blue"}),value:String(l.BLUE)},{text:e({id:"legobluetooth.lightBlue",default:"Light blue"}),value:String(l.LIGHT_BLUE)},{text:e({id:"legobluetooth.lightGreen",default:"Light green"}),value:String(l.LIGHT_GREEN)},{text:e({id:"legobluetooth.green",default:"Green"}),value:String(l.GREEN)},{text:e({id:"legobluetooth.yellow",default:"Yellow"}),value:String(l.YELLOW)},{text:e({id:"legobluetooth.orange",default:"Orange"}),value:String(l.ORANGE)},{text:e({id:"legobluetooth.red",default:"Red"}),value:String(l.RED)},{text:e({id:"legobluetooth.white",default:"White"}),value:String(l.WHITE)}]},XY:{acceptReporters:!1,items:["x","y"]},XYZ:{acceptReporters:!1,items:["x","y","z"]}}}_validatePorts(e){return e.toUpperCase().replace(/[^ABCD]/g,"").split("").filter((e,t,o)=>o.indexOf(e)===t).sort()}motorPWM(e){const t=a.toNumber(e.POWER);e=this._validatePorts(a.toString(e.PORT)).map(e=>{e=this.externalPorts.indexOf(e);return this._peripheral.motorPWM(e,t)});return Promise.all(e).then(u)}motorStop(e){e=this._validatePorts(a.toString(e.PORT)).map(e=>{e=this.externalPorts.indexOf(e);return this._peripheral.motorPWM(e,0)});return Promise.all(e).then(u)}motorRunFor(e){var t=e.DIRECTION,o=a.toNumber(e.VALUE),r=e.UNIT,l=this._validatePorts(a.toString(e.PORT));switch(r){case"rotations":return this._motorRunForDegrees(l,t,360*o);case"degrees":return this._motorRunForDegrees(l,t,o);case"seconds":return this._motorRunTimed(l,t,o);default:return Promise.resolve()}}_motorRunForDegrees(e,t,o){e=e.map(e=>{e=this.externalPorts.indexOf(e);return this._peripheral.motorRunForDegrees(e,t,o)});return Promise.all(e).then(()=>{})}_motorRunTimed(e,t,o){e=e.map(e=>{e=this.externalPorts.indexOf(e);return this._peripheral.motorRunTimed(e,t,o)});return Promise.all(e).then(()=>{})}motorStart(e){const t=e.DIRECTION;e=this._validatePorts(a.toString(e.PORT)).map(e=>{e=this.externalPorts.indexOf(e);return this._peripheral.motorStart(e,t)});return Promise.all(e).then(u)}motorSetSpeed(e){const t=a.toNumber(e.SPEED);return this._validatePorts(a.toString(e.PORT)).forEach(e=>{e=this.externalPorts.indexOf(e);this._peripheral.motorSetSpeed(e,t)}),Promise.resolve()}motorResetRelativePosition(e){const t=a.toNumber(e.RELATIVE_POSITION);e=this._validatePorts(a.toString(e.PORT)).map(e=>{e=this.externalPorts.indexOf(e);return this._peripheral.motorResetRelativePosition(e,t)});return Promise.all(e).then(u)}getRelativePosition(e){return this._getSensorValue(e,"relativePosition",0)}getColor(e){return this._getSensorValue(e,"color",-1)}getDistance(e){return this._getSensorValue(e,"distance",0)}getForce(e){return this._getSensorValue(e,"force",0)}getTilt(e){var t="tilt"+e.XY.toUpperCase();return this._getSensorValue(e,t,0)}_getSensorValue(e,t,o){var e=this._validatePorts(a.toString(e.PORT)).shift();return e&&(e=this.externalPorts.indexOf(e),null!=(e=this._peripheral.inputValue(e,t)))?e:o}setHubLEDColor(e){e=a.toNumber(e.COLOR);return this._peripheral.setLEDColor(e).then(u)}getHubTilt(e){e="tilt"+e.XYZ.toUpperCase(),e=this._peripheral.internalInputValue(e);return null!=e?e:0}getName(){return this._peripheral.name||""}getFirmwareVersion(){return this._peripheral.firmwareVersion||""}getBatteryLevel(){return this._peripheral.batteryLevel}})}(window.Scratch);